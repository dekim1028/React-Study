let Koa,Router,bodyParser,mongoose,api,jwtMiddleware;_2e4‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_2e4‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_2e4‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_2e4‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_2e4‍.w("./api",[["default",["api"],function(v){api=v}]]);_2e4‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);require('dotenv').config();








//비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const {PORT,MONGO_URI} = process.env;

mongoose
.connect(MONGO_URI,{useNewUrlParser:true, useFindAndModify:false})
    .then(()=>{
        console.log('Connected to MongoDB');
    })
    .catch(e=>{
        _2e4‍.g.console.error(e);
});

const app = new Koa();
const router = new Router();

router.use('/api',api.routes()); //api 라우터 적용

//라우터 적용 전에 bodyParser 적용
app.use(bodyParser());
app.use(jwtMiddleware);

//app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const buildDirectory = path.resolve(__dirname,'../../blog-frontend/build');
app.use(serve(buildDirectory));
app.use(async ctx => {
    if(ctx.status===404 && ctx.path.indexOf('/api')!==0){
        await send(ctx,'index.html',{root:buildDirectory});
    }
})

//PORT가 지정되어 있지 않다면 4000을 사용
const port = PORT || 4000;
app.listen(port,()=>{
    _2e4‍.g.console.log('Listening to port %d',port);
})